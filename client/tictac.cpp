// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tictac.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tictac.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tictac {

namespace {

const ::google::protobuf::Descriptor* tictacpacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tictacpacket_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* tictacpacket_MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* tictacpacket_EndType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tictac_2eproto() {
  protobuf_AddDesc_tictac_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tictac.proto");
  GOOGLE_CHECK(file != NULL);
  tictacpacket_descriptor_ = file->message_type(0);
  static const int tictacpacket_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tictacpacket, ipv4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tictacpacket, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tictacpacket, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tictacpacket, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tictacpacket, ipv4opp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tictacpacket, endtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tictacpacket, npos_),
  };
  tictacpacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tictacpacket_descriptor_,
      tictacpacket::default_instance_,
      tictacpacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tictacpacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tictacpacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tictacpacket));
  tictacpacket_MsgType_descriptor_ = tictacpacket_descriptor_->enum_type(0);
  tictacpacket_EndType_descriptor_ = tictacpacket_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tictac_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tictacpacket_descriptor_, &tictacpacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tictac_2eproto() {
  delete tictacpacket::default_instance_;
  delete tictacpacket_reflection_;
}

void protobuf_AddDesc_tictac_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014tictac.proto\022\006tictac\"\340\002\n\014tictacpacket\022"
    "\014\n\004Ipv4\030\001 \002(\005\022-\n\007msgType\030\002 \002(\0162\034.tictac."
    "tictacpacket.MsgType\022\022\n\nplayerName\030\003 \001(\t"
    "\022\r\n\005state\030\004 \001(\t\022\017\n\007Ipv4Opp\030\005 \001(\005\022-\n\007endT"
    "ype\030\006 \001(\0162\034.tictac.tictacpacket.EndType\022"
    "\014\n\004nPos\030\007 \001(\005\"z\n\007MsgType\022\014\n\010REGISTER\020\001\022\t"
    "\n\005START\020\002\022\n\n\006RESUME\020\003\022\006\n\002OK\020\004\022\017\n\013SNAPSHO"
    "TGET\020\005\022\017\n\013SNAPSHOTPUT\020\006\022\r\n\tTERMINATE\020\007\022\007"
    "\n\003END\020\010\022\010\n\004MOVE\020\t\"&\n\007EndType\022\007\n\003WON\020\001\022\010\n"
    "\004LOST\020\002\022\010\n\004DRAW\020\003", 377);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tictac.proto", &protobuf_RegisterTypes);
  tictacpacket::default_instance_ = new tictacpacket();
  tictacpacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tictac_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tictac_2eproto {
  StaticDescriptorInitializer_tictac_2eproto() {
    protobuf_AddDesc_tictac_2eproto();
  }
} static_descriptor_initializer_tictac_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* tictacpacket_MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tictacpacket_MsgType_descriptor_;
}
bool tictacpacket_MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const tictacpacket_MsgType tictacpacket::REGISTER;
const tictacpacket_MsgType tictacpacket::START;
const tictacpacket_MsgType tictacpacket::RESUME;
const tictacpacket_MsgType tictacpacket::OK;
const tictacpacket_MsgType tictacpacket::SNAPSHOTGET;
const tictacpacket_MsgType tictacpacket::SNAPSHOTPUT;
const tictacpacket_MsgType tictacpacket::TERMINATE;
const tictacpacket_MsgType tictacpacket::END;
const tictacpacket_MsgType tictacpacket::MOVE;
const tictacpacket_MsgType tictacpacket::MsgType_MIN;
const tictacpacket_MsgType tictacpacket::MsgType_MAX;
const int tictacpacket::MsgType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* tictacpacket_EndType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tictacpacket_EndType_descriptor_;
}
bool tictacpacket_EndType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const tictacpacket_EndType tictacpacket::WON;
const tictacpacket_EndType tictacpacket::LOST;
const tictacpacket_EndType tictacpacket::DRAW;
const tictacpacket_EndType tictacpacket::EndType_MIN;
const tictacpacket_EndType tictacpacket::EndType_MAX;
const int tictacpacket::EndType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int tictacpacket::kIpv4FieldNumber;
const int tictacpacket::kMsgTypeFieldNumber;
const int tictacpacket::kPlayerNameFieldNumber;
const int tictacpacket::kStateFieldNumber;
const int tictacpacket::kIpv4OppFieldNumber;
const int tictacpacket::kEndTypeFieldNumber;
const int tictacpacket::kNPosFieldNumber;
#endif  // !_MSC_VER

tictacpacket::tictacpacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tictac.tictacpacket)
}

void tictacpacket::InitAsDefaultInstance() {
}

tictacpacket::tictacpacket(const tictacpacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tictac.tictacpacket)
}

void tictacpacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ipv4_ = 0;
  msgtype_ = 1;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv4opp_ = 0;
  endtype_ = 1;
  npos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tictacpacket::~tictacpacket() {
  // @@protoc_insertion_point(destructor:tictac.tictacpacket)
  SharedDtor();
}

void tictacpacket::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (this != default_instance_) {
  }
}

void tictacpacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tictacpacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tictacpacket_descriptor_;
}

const tictacpacket& tictacpacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tictac_2eproto();
  return *default_instance_;
}

tictacpacket* tictacpacket::default_instance_ = NULL;

tictacpacket* tictacpacket::New() const {
  return new tictacpacket;
}

void tictacpacket::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    ipv4_ = 0;
    msgtype_ = 1;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        state_->clear();
      }
    }
    ipv4opp_ = 0;
    endtype_ = 1;
    npos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tictacpacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tictac.tictacpacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Ipv4 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipv4_)));
          set_has_ipv4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // required .tictac.tictacpacket.MsgType msgType = 2;
      case 2: {
        if (tag == 16) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tictac::tictacpacket_MsgType_IsValid(value)) {
            set_msgtype(static_cast< ::tictac::tictacpacket_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerName;
        break;
      }

      // optional string playerName = 3;
      case 3: {
        if (tag == 26) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_state;
        break;
      }

      // optional string state = 4;
      case 4: {
        if (tag == 34) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "state");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Ipv4Opp;
        break;
      }

      // optional int32 Ipv4Opp = 5;
      case 5: {
        if (tag == 40) {
         parse_Ipv4Opp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipv4opp_)));
          set_has_ipv4opp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_endType;
        break;
      }

      // optional .tictac.tictacpacket.EndType endType = 6;
      case 6: {
        if (tag == 48) {
         parse_endType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tictac::tictacpacket_EndType_IsValid(value)) {
            set_endtype(static_cast< ::tictac::tictacpacket_EndType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nPos;
        break;
      }

      // optional int32 nPos = 7;
      case 7: {
        if (tag == 56) {
         parse_nPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npos_)));
          set_has_npos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tictac.tictacpacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tictac.tictacpacket)
  return false;
#undef DO_
}

void tictacpacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tictac.tictacpacket)
  // required int32 Ipv4 = 1;
  if (has_ipv4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ipv4(), output);
  }

  // required .tictac.tictacpacket.MsgType msgType = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playername(), output);
  }

  // optional string state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->state(), output);
  }

  // optional int32 Ipv4Opp = 5;
  if (has_ipv4opp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ipv4opp(), output);
  }

  // optional .tictac.tictacpacket.EndType endType = 6;
  if (has_endtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->endtype(), output);
  }

  // optional int32 nPos = 7;
  if (has_npos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->npos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tictac.tictacpacket)
}

::google::protobuf::uint8* tictacpacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tictac.tictacpacket)
  // required int32 Ipv4 = 1;
  if (has_ipv4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ipv4(), target);
  }

  // required .tictac.tictacpacket.MsgType msgType = 2;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // optional string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // optional string state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->state(), target);
  }

  // optional int32 Ipv4Opp = 5;
  if (has_ipv4opp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ipv4opp(), target);
  }

  // optional .tictac.tictacpacket.EndType endType = 6;
  if (has_endtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->endtype(), target);
  }

  // optional int32 nPos = 7;
  if (has_npos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->npos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tictac.tictacpacket)
  return target;
}

int tictacpacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Ipv4 = 1;
    if (has_ipv4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipv4());
    }

    // required .tictac.tictacpacket.MsgType msgType = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional string playerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional string state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional int32 Ipv4Opp = 5;
    if (has_ipv4opp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipv4opp());
    }

    // optional .tictac.tictacpacket.EndType endType = 6;
    if (has_endtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->endtype());
    }

    // optional int32 nPos = 7;
    if (has_npos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tictacpacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tictacpacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tictacpacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tictacpacket::MergeFrom(const tictacpacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipv4()) {
      set_ipv4(from.ipv4());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ipv4opp()) {
      set_ipv4opp(from.ipv4opp());
    }
    if (from.has_endtype()) {
      set_endtype(from.endtype());
    }
    if (from.has_npos()) {
      set_npos(from.npos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tictacpacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tictacpacket::CopyFrom(const tictacpacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tictacpacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tictacpacket::Swap(tictacpacket* other) {
  if (other != this) {
    std::swap(ipv4_, other->ipv4_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(playername_, other->playername_);
    std::swap(state_, other->state_);
    std::swap(ipv4opp_, other->ipv4opp_);
    std::swap(endtype_, other->endtype_);
    std::swap(npos_, other->npos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tictacpacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tictacpacket_descriptor_;
  metadata.reflection = tictacpacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tictac

// @@protoc_insertion_point(global_scope)
