// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tictac.proto

#ifndef PROTOBUF_tictac_2eproto__INCLUDED
#define PROTOBUF_tictac_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tictac {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tictac_2eproto();
void protobuf_AssignDesc_tictac_2eproto();
void protobuf_ShutdownFile_tictac_2eproto();

class tictacpacket;

enum tictacpacket_MsgType {
  tictacpacket_MsgType_REGISTER = 1,
  tictacpacket_MsgType_START = 2,
  tictacpacket_MsgType_RESUME = 3,
  tictacpacket_MsgType_OK = 4,
  tictacpacket_MsgType_SNAPSHOTGET = 5,
  tictacpacket_MsgType_SNAPSHOTPUT = 6,
  tictacpacket_MsgType_TERMINATE = 7,
  tictacpacket_MsgType_END = 8,
  tictacpacket_MsgType_MOVE = 9
};
bool tictacpacket_MsgType_IsValid(int value);
const tictacpacket_MsgType tictacpacket_MsgType_MsgType_MIN = tictacpacket_MsgType_REGISTER;
const tictacpacket_MsgType tictacpacket_MsgType_MsgType_MAX = tictacpacket_MsgType_MOVE;
const int tictacpacket_MsgType_MsgType_ARRAYSIZE = tictacpacket_MsgType_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* tictacpacket_MsgType_descriptor();
inline const ::std::string& tictacpacket_MsgType_Name(tictacpacket_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    tictacpacket_MsgType_descriptor(), value);
}
inline bool tictacpacket_MsgType_Parse(
    const ::std::string& name, tictacpacket_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tictacpacket_MsgType>(
    tictacpacket_MsgType_descriptor(), name, value);
}
enum tictacpacket_EndType {
  tictacpacket_EndType_WON = 1,
  tictacpacket_EndType_LOST = 2,
  tictacpacket_EndType_DRAW = 3
};
bool tictacpacket_EndType_IsValid(int value);
const tictacpacket_EndType tictacpacket_EndType_EndType_MIN = tictacpacket_EndType_WON;
const tictacpacket_EndType tictacpacket_EndType_EndType_MAX = tictacpacket_EndType_DRAW;
const int tictacpacket_EndType_EndType_ARRAYSIZE = tictacpacket_EndType_EndType_MAX + 1;

const ::google::protobuf::EnumDescriptor* tictacpacket_EndType_descriptor();
inline const ::std::string& tictacpacket_EndType_Name(tictacpacket_EndType value) {
  return ::google::protobuf::internal::NameOfEnum(
    tictacpacket_EndType_descriptor(), value);
}
inline bool tictacpacket_EndType_Parse(
    const ::std::string& name, tictacpacket_EndType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tictacpacket_EndType>(
    tictacpacket_EndType_descriptor(), name, value);
}
// ===================================================================

class tictacpacket : public ::google::protobuf::Message {
 public:
  tictacpacket();
  virtual ~tictacpacket();

  tictacpacket(const tictacpacket& from);

  inline tictacpacket& operator=(const tictacpacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tictacpacket& default_instance();

  void Swap(tictacpacket* other);

  // implements Message ----------------------------------------------

  tictacpacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tictacpacket& from);
  void MergeFrom(const tictacpacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef tictacpacket_MsgType MsgType;
  static const MsgType REGISTER = tictacpacket_MsgType_REGISTER;
  static const MsgType START = tictacpacket_MsgType_START;
  static const MsgType RESUME = tictacpacket_MsgType_RESUME;
  static const MsgType OK = tictacpacket_MsgType_OK;
  static const MsgType SNAPSHOTGET = tictacpacket_MsgType_SNAPSHOTGET;
  static const MsgType SNAPSHOTPUT = tictacpacket_MsgType_SNAPSHOTPUT;
  static const MsgType TERMINATE = tictacpacket_MsgType_TERMINATE;
  static const MsgType END = tictacpacket_MsgType_END;
  static const MsgType MOVE = tictacpacket_MsgType_MOVE;
  static inline bool MsgType_IsValid(int value) {
    return tictacpacket_MsgType_IsValid(value);
  }
  static const MsgType MsgType_MIN =
    tictacpacket_MsgType_MsgType_MIN;
  static const MsgType MsgType_MAX =
    tictacpacket_MsgType_MsgType_MAX;
  static const int MsgType_ARRAYSIZE =
    tictacpacket_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgType_descriptor() {
    return tictacpacket_MsgType_descriptor();
  }
  static inline const ::std::string& MsgType_Name(MsgType value) {
    return tictacpacket_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(const ::std::string& name,
      MsgType* value) {
    return tictacpacket_MsgType_Parse(name, value);
  }

  typedef tictacpacket_EndType EndType;
  static const EndType WON = tictacpacket_EndType_WON;
  static const EndType LOST = tictacpacket_EndType_LOST;
  static const EndType DRAW = tictacpacket_EndType_DRAW;
  static inline bool EndType_IsValid(int value) {
    return tictacpacket_EndType_IsValid(value);
  }
  static const EndType EndType_MIN =
    tictacpacket_EndType_EndType_MIN;
  static const EndType EndType_MAX =
    tictacpacket_EndType_EndType_MAX;
  static const int EndType_ARRAYSIZE =
    tictacpacket_EndType_EndType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EndType_descriptor() {
    return tictacpacket_EndType_descriptor();
  }
  static inline const ::std::string& EndType_Name(EndType value) {
    return tictacpacket_EndType_Name(value);
  }
  static inline bool EndType_Parse(const ::std::string& name,
      EndType* value) {
    return tictacpacket_EndType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 Ipv4 = 1;
  inline bool has_ipv4() const;
  inline void clear_ipv4();
  static const int kIpv4FieldNumber = 1;
  inline ::google::protobuf::int32 ipv4() const;
  inline void set_ipv4(::google::protobuf::int32 value);

  // required .tictac.tictacpacket.MsgType msgType = 2;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 2;
  inline ::tictac::tictacpacket_MsgType msgtype() const;
  inline void set_msgtype(::tictac::tictacpacket_MsgType value);

  // optional string playerName = 3;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 3;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional string state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const char* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  inline void set_allocated_state(::std::string* state);

  // optional int32 Ipv4Opp = 5;
  inline bool has_ipv4opp() const;
  inline void clear_ipv4opp();
  static const int kIpv4OppFieldNumber = 5;
  inline ::google::protobuf::int32 ipv4opp() const;
  inline void set_ipv4opp(::google::protobuf::int32 value);

  // optional .tictac.tictacpacket.EndType endType = 6;
  inline bool has_endtype() const;
  inline void clear_endtype();
  static const int kEndTypeFieldNumber = 6;
  inline ::tictac::tictacpacket_EndType endtype() const;
  inline void set_endtype(::tictac::tictacpacket_EndType value);

  // optional int32 nPos = 7;
  inline bool has_npos() const;
  inline void clear_npos();
  static const int kNPosFieldNumber = 7;
  inline ::google::protobuf::int32 npos() const;
  inline void set_npos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tictac.tictacpacket)
 private:
  inline void set_has_ipv4();
  inline void clear_has_ipv4();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_ipv4opp();
  inline void clear_has_ipv4opp();
  inline void set_has_endtype();
  inline void clear_has_endtype();
  inline void set_has_npos();
  inline void clear_has_npos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ipv4_;
  int msgtype_;
  ::std::string* playername_;
  ::std::string* state_;
  ::google::protobuf::int32 ipv4opp_;
  int endtype_;
  ::google::protobuf::int32 npos_;
  friend void  protobuf_AddDesc_tictac_2eproto();
  friend void protobuf_AssignDesc_tictac_2eproto();
  friend void protobuf_ShutdownFile_tictac_2eproto();

  void InitAsDefaultInstance();
  static tictacpacket* default_instance_;
};
// ===================================================================


// ===================================================================

// tictacpacket

// required int32 Ipv4 = 1;
inline bool tictacpacket::has_ipv4() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tictacpacket::set_has_ipv4() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tictacpacket::clear_has_ipv4() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tictacpacket::clear_ipv4() {
  ipv4_ = 0;
  clear_has_ipv4();
}
inline ::google::protobuf::int32 tictacpacket::ipv4() const {
  // @@protoc_insertion_point(field_get:tictac.tictacpacket.Ipv4)
  return ipv4_;
}
inline void tictacpacket::set_ipv4(::google::protobuf::int32 value) {
  set_has_ipv4();
  ipv4_ = value;
  // @@protoc_insertion_point(field_set:tictac.tictacpacket.Ipv4)
}

// required .tictac.tictacpacket.MsgType msgType = 2;
inline bool tictacpacket::has_msgtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tictacpacket::set_has_msgtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tictacpacket::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tictacpacket::clear_msgtype() {
  msgtype_ = 1;
  clear_has_msgtype();
}
inline ::tictac::tictacpacket_MsgType tictacpacket::msgtype() const {
  // @@protoc_insertion_point(field_get:tictac.tictacpacket.msgType)
  return static_cast< ::tictac::tictacpacket_MsgType >(msgtype_);
}
inline void tictacpacket::set_msgtype(::tictac::tictacpacket_MsgType value) {
  assert(::tictac::tictacpacket_MsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:tictac.tictacpacket.msgType)
}

// optional string playerName = 3;
inline bool tictacpacket::has_playername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tictacpacket::set_has_playername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tictacpacket::clear_has_playername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tictacpacket::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& tictacpacket::playername() const {
  // @@protoc_insertion_point(field_get:tictac.tictacpacket.playerName)
  return *playername_;
}
inline void tictacpacket::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:tictac.tictacpacket.playerName)
}
inline void tictacpacket::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:tictac.tictacpacket.playerName)
}
inline void tictacpacket::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tictac.tictacpacket.playerName)
}
inline ::std::string* tictacpacket::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tictac.tictacpacket.playerName)
  return playername_;
}
inline ::std::string* tictacpacket::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tictacpacket::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tictac.tictacpacket.playerName)
}

// optional string state = 4;
inline bool tictacpacket::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tictacpacket::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tictacpacket::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tictacpacket::clear_state() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& tictacpacket::state() const {
  // @@protoc_insertion_point(field_get:tictac.tictacpacket.state)
  return *state_;
}
inline void tictacpacket::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set:tictac.tictacpacket.state)
}
inline void tictacpacket::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set_char:tictac.tictacpacket.state)
}
inline void tictacpacket::set_state(const char* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tictac.tictacpacket.state)
}
inline ::std::string* tictacpacket::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tictac.tictacpacket.state)
  return state_;
}
inline ::std::string* tictacpacket::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tictacpacket::set_allocated_state(::std::string* state) {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (state) {
    set_has_state();
    state_ = state;
  } else {
    clear_has_state();
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tictac.tictacpacket.state)
}

// optional int32 Ipv4Opp = 5;
inline bool tictacpacket::has_ipv4opp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tictacpacket::set_has_ipv4opp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tictacpacket::clear_has_ipv4opp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tictacpacket::clear_ipv4opp() {
  ipv4opp_ = 0;
  clear_has_ipv4opp();
}
inline ::google::protobuf::int32 tictacpacket::ipv4opp() const {
  // @@protoc_insertion_point(field_get:tictac.tictacpacket.Ipv4Opp)
  return ipv4opp_;
}
inline void tictacpacket::set_ipv4opp(::google::protobuf::int32 value) {
  set_has_ipv4opp();
  ipv4opp_ = value;
  // @@protoc_insertion_point(field_set:tictac.tictacpacket.Ipv4Opp)
}

// optional .tictac.tictacpacket.EndType endType = 6;
inline bool tictacpacket::has_endtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tictacpacket::set_has_endtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tictacpacket::clear_has_endtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tictacpacket::clear_endtype() {
  endtype_ = 1;
  clear_has_endtype();
}
inline ::tictac::tictacpacket_EndType tictacpacket::endtype() const {
  // @@protoc_insertion_point(field_get:tictac.tictacpacket.endType)
  return static_cast< ::tictac::tictacpacket_EndType >(endtype_);
}
inline void tictacpacket::set_endtype(::tictac::tictacpacket_EndType value) {
  assert(::tictac::tictacpacket_EndType_IsValid(value));
  set_has_endtype();
  endtype_ = value;
  // @@protoc_insertion_point(field_set:tictac.tictacpacket.endType)
}

// optional int32 nPos = 7;
inline bool tictacpacket::has_npos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tictacpacket::set_has_npos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tictacpacket::clear_has_npos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tictacpacket::clear_npos() {
  npos_ = 0;
  clear_has_npos();
}
inline ::google::protobuf::int32 tictacpacket::npos() const {
  // @@protoc_insertion_point(field_get:tictac.tictacpacket.nPos)
  return npos_;
}
inline void tictacpacket::set_npos(::google::protobuf::int32 value) {
  set_has_npos();
  npos_ = value;
  // @@protoc_insertion_point(field_set:tictac.tictacpacket.nPos)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tictac

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tictac::tictacpacket_MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tictac::tictacpacket_MsgType>() {
  return ::tictac::tictacpacket_MsgType_descriptor();
}
template <> struct is_proto_enum< ::tictac::tictacpacket_EndType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tictac::tictacpacket_EndType>() {
  return ::tictac::tictacpacket_EndType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tictac_2eproto__INCLUDED
